"""
Module de gestion de base de donn√©es PostgreSQL pour Hermes Bot

Ce module fournit une interface compl√®te pour la gestion de la base de donn√©es
PostgreSQL avec pool de connexions, gestion d'erreurs et managers sp√©cialis√©s
pour diff√©rentes fonctionnalit√©s du bot.

Fonctionnalit√©s:
- Gestionnaire de base de donn√©es avec pool de connexions
- Managers sp√©cialis√©s (Voice, Warn, UserMessageStats)
- Gestion s√©curis√©e des transactions
- Requ√™tes optimis√©es avec gestion d'erreurs
- Support des op√©rations batch
- Logging automatique des op√©rations

Classes principales:
- DatabaseManager: Gestionnaire principal de base de donn√©es
- VoiceDataManager: Gestion des donn√©es vocales des utilisateurs
- WarnManager: Gestion des avertissements
- UserMessageStatsManager: Statistiques des messages

Auteur: Dr.TableBasse
Version: 2.0
"""

import asyncpg
import asyncio
from contextlib import asynccontextmanager
from typing import Optional, List, Dict, Any, Tuple
import logging
from datetime import datetime, timezone
import os
from dotenv import load_dotenv

# Charger les variables d'environnement
load_dotenv()

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Configuration PostgreSQL
POSTGRES_CONFIG = {
    'host': os.getenv('PG_HOST', 'localhost'),
    'port': int(os.getenv('PG_PORT', 5432)),
    'database': os.getenv('PG_DB', 'saucisseland'),
    'user': os.getenv('PG_USER', 'hermes_bot'),
    'password': os.getenv('PG_PASSWORD', 'bot_password_2024')
}

class DatabaseManager:
    """
    Gestionnaire de base de donn√©es PostgreSQL avec pool de connexions et gestion d'erreurs.
    
    Cette classe fournit une interface s√©curis√©e pour interagir avec la base de donn√©es
    PostgreSQL en utilisant un pool de connexions pour optimiser les performances.
    
    Fonctionnalit√©s:
    - Pool de connexions automatique
    - Gestion s√©curis√©e des transactions
    - Requ√™tes optimis√©es avec gestion d'erreurs
    - Support des op√©rations batch
    """
    
    def __init__(self):
        """
        Initialise le gestionnaire de base de donn√©es.
        
        Returns:
            None
        """
        self._pool = None
        self._lock = asyncio.Lock()
        
    async def initialize(self):
        """
        Initialise le pool de connexions PostgreSQL.
        
        Cette m√©thode cr√©e un pool de connexions avec les param√®tres
        de configuration d√©finis dans POSTGRES_CONFIG.
        
        Raises:
            Exception: Si l'initialisation du pool √©choue
            
        Returns:
            None
        """
        try:
            self._pool = await asyncpg.create_pool(**POSTGRES_CONFIG, min_size=2, max_size=10)
            logger.info("‚úÖ Pool de connexions PostgreSQL initialis√©")
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'initialisation du pool PostgreSQL: {e}")
            raise
    
    async def close(self):
        """
        Ferme le pool de connexions PostgreSQL.
        
        Returns:
            None
        """
        if self._pool:
            await self._pool.close()
            logger.info("üîí Pool de connexions PostgreSQL ferm√©")
    
    @asynccontextmanager
    async def get_connection(self):
        """
        Contexte manager pour obtenir une connexion de mani√®re s√©curis√©e.
        
        Ce contexte manager g√®re automatiquement l'acquisition et la lib√©ration
        des connexions du pool, ainsi que la gestion des erreurs.
        
        Yields:
            asyncpg.Connection: Connexion √† la base de donn√©es
            
        Raises:
            Exception: En cas d'erreur de connexion ou de requ√™te
        """
        if not self._pool:
            await self.initialize()
        
        # √Ä ce point, self._pool ne peut pas √™tre None
        assert self._pool is not None
        
        conn = None
        try:
            conn = await self._pool.acquire()
            yield conn
        except Exception as e:
            logger.error(f"Erreur de base de donn√©es: {e}")
            # Note: asyncpg g√®re automatiquement les rollbacks en cas d'erreur
            raise
        finally:
            if conn and self._pool:
                await self._pool.release(conn)
    
    async def execute_query(self, query: str, *args) -> Optional[List[Dict[str, Any]]]:
        """
        Ex√©cute une requ√™te SELECT et retourne les r√©sultats.
        
        Args:
            query (str): Requ√™te SQL √† ex√©cuter
            *args: Param√®tres de la requ√™te
            
        Returns:
            Optional[List[Dict[str, Any]]]: R√©sultats de la requ√™te ou None si aucun r√©sultat
            
        Raises:
            Exception: En cas d'erreur lors de l'ex√©cution de la requ√™te
        """
        async with self.get_connection() as conn:
            try:
                rows = await conn.fetch(query, *args)
                return [dict(row) for row in rows] if rows else None
            except Exception as e:
                logger.error(f"Erreur lors de l'ex√©cution de la requ√™te: {e}")
                raise
    
    async def execute_update(self, query: str, *args) -> int:
        """
        Ex√©cute une requ√™te INSERT/UPDATE/DELETE et retourne le nombre de lignes affect√©es.
        
        Args:
            query (str): Requ√™te SQL √† ex√©cuter
            *args: Param√®tres de la requ√™te
            
        Returns:
            int: Nombre de lignes affect√©es par la requ√™te
            
        Raises:
            Exception: En cas d'erreur lors de l'ex√©cution de la requ√™te
        """
        async with self.get_connection() as conn:
            try:
                result = await conn.execute(query, *args)
                # Extraire le nombre de lignes affect√©es du r√©sultat
                if 'UPDATE' in query.upper():
                    return int(result.split()[-1])
                elif 'INSERT' in query.upper():
                    return 1
                elif 'DELETE' in query.upper():
                    return int(result.split()[-1])
                return 0
            except Exception as e:
                logger.error(f"Erreur lors de l'ex√©cution de la mise √† jour: {e}")
                raise
    
    async def execute_many(self, query: str, params_list: List[tuple]) -> int:
        """
        Ex√©cute plusieurs requ√™tes en batch.
        
        Args:
            query (str): Requ√™te SQL √† ex√©cuter
            params_list (List[tuple]): Liste des param√®tres pour chaque requ√™te
            
        Returns:
            int: Nombre de requ√™tes ex√©cut√©es
            
        Raises:
            Exception: En cas d'erreur lors de l'ex√©cution des requ√™tes
        """
        async with self.get_connection() as conn:
            try:
                await conn.executemany(query, params_list)
                return len(params_list)
            except Exception as e:
                logger.error(f"Erreur lors de l'ex√©cution batch: {e}")
                raise

class VoiceDataManager:
    """
    Gestionnaire sp√©cifique pour les donn√©es vocales des utilisateurs.
    
    Cette classe g√®re toutes les op√©rations li√©es aux donn√©es vocales
    des utilisateurs (temps pass√© en vocal, statistiques, etc.).
    """
    
    def __init__(self, db_manager: DatabaseManager):
        """
        Initialise le gestionnaire de donn√©es vocales.
        
        Args:
            db_manager (DatabaseManager): Instance du gestionnaire de base de donn√©es
        """
        self.db = db_manager
    
    async def get_user_voice_data(self, user_id: int) -> Optional[Dict[str, Any]]:
        """
        R√©cup√®re les donn√©es vocales d'un utilisateur.
        
        Args:
            user_id (int): ID de l'utilisateur Discord
            
        Returns:
            Optional[Dict[str, Any]]: Donn√©es vocales de l'utilisateur ou None si non trouv√©
        """
        query = "SELECT * FROM user_voice_data WHERE user_id = $1"
        results = await self.db.execute_query(query, user_id)
        return results[0] if results else None
    
    async def update_user_voice_time(self, user_id: int, username: str, time_spent: int) -> bool:
        """
        Met √† jour le temps vocal d'un utilisateur.
        
        Args:
            user_id (int): ID de l'utilisateur Discord
            username (str): Nom d'utilisateur Discord
            time_spent (int): Temps pass√© en vocal (en secondes)
            
        Returns:
            bool: True si la mise √† jour a r√©ussi, False sinon
        """
        try:
            # V√©rifier si l'utilisateur existe
            existing_user = await self.get_user_voice_data(user_id)
            
            if existing_user:
                # Mettre √† jour le temps existant
                query = """
                    UPDATE user_voice_data 
                    SET total_time = total_time + $1, username = $2, updated_at = CURRENT_TIMESTAMP 
                    WHERE user_id = $3
                """
                await self.db.execute_update(query, time_spent, username, user_id)
            else:
                # Cr√©er un nouvel utilisateur
                query = """
                    INSERT INTO user_voice_data (user_id, username, total_time) 
                    VALUES ($1, $2, $3)
                """
                await self.db.execute_update(query, user_id, username, time_spent)
            
            logger.info(f"Temps vocal mis √† jour pour l'utilisateur {user_id}: +{time_spent}s")
            return True
            
        except Exception as e:
            logger.error(f"Erreur lors de la mise √† jour du temps vocal: {e}")
            return False
    
    async def get_top_voice_users(self, limit: int = 10) -> List[Dict[str, Any]]:
        """
        R√©cup√®re les utilisateurs avec le plus de temps vocal.
        
        Args:
            limit (int): Nombre maximum d'utilisateurs √† retourner
            
        Returns:
            List[Dict[str, Any]]: Liste des utilisateurs tri√©s par temps vocal
        """
        query = "SELECT * FROM user_voice_data ORDER BY total_time DESC LIMIT $1"
        return await self.db.execute_query(query, limit) or []

class WarnManager:
    """
    Gestionnaire pour les avertissements des utilisateurs.
    
    Cette classe g√®re toutes les op√©rations li√©es aux avertissements
    (ajout, r√©cup√©ration, comptage, etc.).
    """
    
    def __init__(self, db_manager: DatabaseManager):
        """
        Initialise le gestionnaire d'avertissements.
        
        Args:
            db_manager (DatabaseManager): Instance du gestionnaire de base de donn√©es
        """
        self.db = db_manager
    
    async def add_warn(self, user_id: int, reason: str, moderator_id: int) -> bool:
        """
        Ajoute un avertissement √† un utilisateur.
        
        Args:
            user_id (int): ID de l'utilisateur √† avertir
            reason (str): Raison de l'avertissement
            moderator_id (int): ID du mod√©rateur qui donne l'avertissement
            
        Returns:
            bool: True si l'avertissement a √©t√© ajout√© avec succ√®s, False sinon
        """
        try:
            # S'assurer que l'utilisateur existe dans user_voice_data
            await self.db.execute_update(
                "INSERT INTO user_voice_data (user_id, username) VALUES ($1, $2) ON CONFLICT (user_id) DO NOTHING",
                user_id, f"User_{user_id}"
            )
            
            # Ajouter l'avertissement
            query = "INSERT INTO warn (user_id, reason, create_time, moderator_id) VALUES ($1, $2, $3, $4)"
            await self.db.execute_update(query, user_id, reason, int(datetime.now(timezone.utc).timestamp()), moderator_id)
            
            logger.info(f"Avertissement ajout√© pour l'utilisateur {user_id}: {reason}")
            return True
            
        except Exception as e:
            logger.error(f"Erreur lors de l'ajout de l'avertissement: {e}")
            return False
    
    async def get_user_warns(self, user_id: int) -> List[Dict[str, Any]]:
        """
        R√©cup√®re tous les avertissements d'un utilisateur.
        
        Args:
            user_id (int): ID de l'utilisateur
            
        Returns:
            List[Dict[str, Any]]: Liste des avertissements de l'utilisateur
        """
        query = """
        SELECT w.*, u.username 
        FROM warn w 
        JOIN user_voice_data u ON w.user_id = u.user_id 
        WHERE w.user_id = $1 
        ORDER BY w.create_time DESC
        """
        return await self.db.execute_query(query, user_id) or []
    
    async def get_warn_count(self, user_id: int) -> int:
        """
        Compte le nombre d'avertissements d'un utilisateur.
        
        Args:
            user_id (int): ID de l'utilisateur
            
        Returns:
            int: Nombre d'avertissements de l'utilisateur
        """
        query = "SELECT COUNT(*) as count FROM warn WHERE user_id = $1"
        result = await self.db.execute_query(query, user_id)
        return result[0]['count'] if result else 0

class UserMessageStatsManager:
    """
    Gestionnaire pour les statistiques des messages utilisateur/salon.
    
    Cette classe g√®re les statistiques des messages envoy√©s par les utilisateurs
    dans diff√©rents canaux du serveur Discord.
    """
    
    def __init__(self, db_manager: DatabaseManager):
        """
        Initialise le gestionnaire de statistiques de messages.
        
        Args:
            db_manager (DatabaseManager): Instance du gestionnaire de base de donn√©es
        """
        self.db = db_manager
    
    async def increment_message_count(self, user_id: int, channel_id: int):
        """
        Incr√©mente le compteur de messages pour un utilisateur dans un canal.
        
        Args:
            user_id (int): ID de l'utilisateur
            channel_id (int): ID du canal
            
        Returns:
            None
        """
        try:
            # D'abord, s'assurer que l'utilisateur existe dans user_voice_data
            # Si ce n'est pas le cas, le cr√©er avec un nom d'utilisateur temporaire
            async with self.db.get_connection() as conn:
                # V√©rifier si l'utilisateur existe
                user_exists = await conn.fetchval(
                    "SELECT 1 FROM user_voice_data WHERE user_id = $1", 
                    user_id
                )
                
                if not user_exists:
                    # Cr√©er l'utilisateur avec un nom temporaire
                    await conn.execute(
                        "INSERT INTO user_voice_data (user_id, username) VALUES ($1, $2)",
                        user_id, f"User_{user_id}"
                    )
                    logger.info(f"Utilisateur {user_id} cr√©√© automatiquement dans user_voice_data")
                
                # Maintenant incr√©menter le compteur de messages
                await conn.execute("""
                    INSERT INTO user_message_stats (user_id, channel_id, message_count) 
                    VALUES ($1, $2, 1) 
                    ON CONFLICT (user_id, channel_id) 
                    DO UPDATE SET message_count = user_message_stats.message_count + 1
                """, user_id, channel_id)
                
        except Exception as e:
            logger.error(f"Erreur lors de l'incr√©mentation du compteur de messages: {e}")
            raise
    
    async def get_total_messages(self, user_id: int) -> int:
        """
        R√©cup√®re le nombre total de messages d'un utilisateur.
        
        Args:
            user_id (int): ID de l'utilisateur
            
        Returns:
            int: Nombre total de messages de l'utilisateur
        """
        query = "SELECT SUM(message_count) as total FROM user_message_stats WHERE user_id = $1"
        result = await self.db.execute_query(query, user_id)
        return result[0]['total'] if result and result[0]['total'] else 0
    
    async def get_top_channels(self, user_id: int, limit: int = 3):
        """
        R√©cup√®re les canaux o√π un utilisateur a le plus post√©.
        
        Args:
            user_id (int): ID de l'utilisateur
            limit (int): Nombre maximum de canaux √† retourner
            
        Returns:
            List[Dict[str, Any]]: Liste des canaux tri√©s par nombre de messages
        """
        query = """
        SELECT channel_id, message_count 
        FROM user_message_stats 
        WHERE user_id = $1 
        ORDER BY message_count DESC 
        LIMIT $2
        """
        return await self.db.execute_query(query, user_id, limit) or []
    
    async def get_leaderboard(self, limit: int = 10):
        """
        R√©cup√®re le classement des utilisateurs par nombre de messages.
        
        Args:
            limit (int): Nombre maximum d'utilisateurs √† retourner
            
        Returns:
            List[Dict[str, Any]]: Classement des utilisateurs par nombre de messages
        """
        query = """
        SELECT u.user_id, u.username, SUM(ums.message_count) as total_messages
        FROM user_voice_data u
        JOIN user_message_stats ums ON u.user_id = ums.user_id
        GROUP BY u.user_id, u.username
        ORDER BY total_messages DESC
        LIMIT $1
        """
        return await self.db.execute_query(query, limit) or []
    
    async def update_username(self, user_id: int, username: str):
        """
        Met √† jour le nom d'utilisateur dans user_voice_data.
        
        Args:
            user_id (int): ID de l'utilisateur
            username (str): Nouveau nom d'utilisateur
            
        Returns:
            None
        """
        try:
            query = "UPDATE user_voice_data SET username = $1 WHERE user_id = $2"
            await self.db.execute_update(query, username, user_id)
            logger.info(f"Nom d'utilisateur mis √† jour pour {user_id}: {username}")
        except Exception as e:
            logger.error(f"Erreur lors de la mise √† jour du nom d'utilisateur: {e}")
            raise

# Instances globales
db_manager = DatabaseManager()
voice_manager = VoiceDataManager(db_manager)
warn_manager = WarnManager(db_manager)
user_message_stats_manager = UserMessageStatsManager(db_manager)

async def setup_database():
    """
    Configure et initialise la base de donn√©es PostgreSQL.
    
    Cette fonction cr√©e toutes les tables n√©cessaires au fonctionnement
    du bot si elles n'existent pas d√©j√†.
    
    Returns:
        None
    """
    try:
        await db_manager.initialize()
        
        async with db_manager.get_connection() as conn:
            # Cr√©er la table user_voice_data
            await conn.execute("""
                CREATE TABLE IF NOT EXISTS user_voice_data (
                    user_id BIGINT PRIMARY KEY,
                    username VARCHAR(255) NOT NULL,
                    total_time INTEGER DEFAULT 0,
                    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
                )
            """)
            
            # Cr√©er la table warn
            await conn.execute("""
                CREATE TABLE IF NOT EXISTS warn (
                    id SERIAL PRIMARY KEY,
                    user_id BIGINT NOT NULL,
                    reason TEXT NOT NULL,
                    create_time BIGINT NOT NULL,
                    moderator_id BIGINT NOT NULL,
                    FOREIGN KEY (user_id) REFERENCES user_voice_data(user_id)
                )
            """)
            
            # Cr√©er la table user_message_stats
            await conn.execute("""
                CREATE TABLE IF NOT EXISTS user_message_stats (
                    user_id BIGINT NOT NULL,
                    channel_id BIGINT NOT NULL,
                    message_count INTEGER DEFAULT 1,
                    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                    PRIMARY KEY (user_id, channel_id),
                    FOREIGN KEY (user_id) REFERENCES user_voice_data(user_id)
                )
            """)
            
        logger.info("‚úÖ Base de donn√©es configur√©e avec succ√®s")
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la configuration de la base de donn√©es: {e}")
        raise

async def init_database():
    """
    Initialise la base de donn√©es et les managers.
    
    Cette fonction configure la base de donn√©es et initialise
    tous les managers n√©cessaires au fonctionnement du bot.
    
    Returns:
        None
    """
    await setup_database()
    logger.info("üöÄ Gestionnaire de base de donn√©es PostgreSQL pr√™t") 

async def get_channel_message_stats(limit: int = 10) -> List[Dict[str, Any]]:
    """
    R√©cup√®re les statistiques des canaux les plus actifs.
    
    Args:
        limit (int): Nombre maximum de canaux √† retourner
        
    Returns:
        List[Dict[str, Any]]: Liste des canaux avec leurs statistiques
    """
    try:
        db_manager = DatabaseManager()
        await db_manager.initialize()
        
        query = """
            SELECT channel_id, message_count
            FROM channel_message_stats
            ORDER BY message_count DESC
            LIMIT $1
        """
        
        results = await db_manager.execute_query(query, limit)
        await db_manager.close()
        
        return results if results else []
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la r√©cup√©ration des stats des canaux: {e}")
        return [] 