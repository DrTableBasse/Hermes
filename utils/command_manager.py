"""
Module de gestion des statuts de commandes pour Hermes Bot

Ce module g√®re l'activation/d√©sactivation des commandes du bot via une base de donn√©es PostgreSQL.
Il inclut un syst√®me de cache pour optimiser les performances et des fonctions utilitaires
pour la gestion des commandes.

Fonctionnalit√©s:
- Gestion des statuts de commandes (activ√©/d√©sactiv√©)
- Cache en m√©moire pour optimiser les performances
- Support des commandes globales et sp√©cifiques au serveur
- D√©corateur pour v√©rifier automatiquement le statut des commandes
- Initialisation automatique de la table de base de donn√©es
- Logging des changements de statut des commandes

Auteur: Dr.TableBasse
Version: 2.1
"""

import asyncio
import functools
from datetime import datetime, timedelta
from typing import Dict, Optional, Callable
import discord
from utils.database import DatabaseManager
from utils.logging import log_command_usage

# Cache en m√©moire pour les statuts de commandes
COMMAND_STATUS_CACHE: Dict[str, bool] = {}
CACHE_EXPIRY: Dict[str, datetime] = {}
CACHE_DURATION = timedelta(minutes=5)  # Cache valide pendant 5 minutes

async def log_command_status_change(interaction: discord.Interaction, command_name: str, is_enabled: bool, guild_id: Optional[int] = None):
    """
    Log les changements de statut des commandes.
    
    Args:
        interaction (discord.Interaction): L'interaction Discord
        command_name (str): Nom de la commande
        is_enabled (bool): Nouveau statut (True = activ√©, False = d√©sactiv√©)
        guild_id (Optional[int]): ID du serveur (optionnel)
    """
    try:
        guild = interaction.guild
        if not guild:
            return
            
        # Utiliser le canal de log des commandes ou le canal de log principal
        log_channel_id = None
        try:
            from utils.constants import get_env_var
            command_log_id = get_env_var('COMMAND_LOG_CHANNEL_ID', required=False)
            if command_log_id and command_log_id.isdigit():
                log_channel_id = int(command_log_id)
        except:
            pass
            
        if not log_channel_id:
            try:
                from utils.constants import get_env_var
                log_channel_id = int(get_env_var('LOG_CHANNEL_ID', required=True))
            except:
                print("‚ö†Ô∏è Impossible de r√©cup√©rer l'ID du canal de log")
                return
                
        log_channel = guild.get_channel(log_channel_id)
        if not log_channel:
            print(f"‚ö†Ô∏è Canal de log non trouv√©: {log_channel_id}")
            return
            
        # Cr√©er l'embed de log
        status_text = "‚úÖ Activ√©e" if is_enabled else "‚ùå D√©sactiv√©e"
        status_icon = "‚úÖ" if is_enabled else "‚ùå"
        color = discord.Color.green() if is_enabled else discord.Color.red()
        
        scope_text = f"serveur **{guild.name}**" if guild_id else "**globalement**"
        
        embed = discord.Embed(
            title=f"{status_icon} Changement de Statut de Commande",
            description=f"**Commande:** `/{command_name}`\n**Nouveau statut:** {status_text}\n**Port√©e:** {scope_text}",
            color=color,
            timestamp=datetime.now()
        )
        
        embed.set_thumbnail(url=interaction.user.avatar.url if interaction.user.avatar else interaction.user.default_avatar.url)
        embed.add_field(name="üë§ Mod√©rateur", value=interaction.user.mention, inline=True)
        embed.add_field(name="üìÖ Date", value=datetime.now().strftime("%d/%m/%Y %H:%M:%S"), inline=True)
        
        # V√©rifier que le canal est un TextChannel avant d'utiliser mention
        if hasattr(interaction.channel, 'mention'):
            embed.add_field(name="üìç Canal", value=interaction.channel.mention, inline=True)
        
        # Ajouter les permissions du mod√©rateur
        if hasattr(interaction.user, 'guild_permissions') and interaction.user.guild_permissions:
            permissions = []
            if interaction.user.guild_permissions.administrator:
                permissions.append("üëë Admin")
            if interaction.user.guild_permissions.manage_guild:
                permissions.append("‚öôÔ∏è Gestionnaire Serveur")
            if interaction.user.guild_permissions.manage_roles:
                permissions.append("üîë Gestionnaire R√¥les")
            if permissions:
                embed.add_field(name="üîê Permissions", value=", ".join(permissions), inline=True)
        
        # V√©rifier que le canal peut envoyer des messages
        if hasattr(log_channel, 'send'):
            await log_channel.send(embed=embed)
        
    except Exception as e:
        print(f"‚ùå Erreur lors du log du changement de statut: {e}")

def get_db_connection() -> Optional[DatabaseManager]:
    """
    R√©cup√®re une connexion √† la base de donn√©es.
    
    Returns:
        DatabaseManager: Instance du gestionnaire de base de donn√©es ou None si erreur
    """
    try:
        return DatabaseManager()
    except Exception as e:
        print(f"‚ùå Erreur lors de la connexion √† la base de donn√©es: {e}")
        return None

class CommandStatusManager:
    """
    Gestionnaire centralis√© des statuts des commandes.
    
    Cette classe fournit des m√©thodes pour g√©rer l'activation/d√©sactivation
    des commandes du bot via une base de donn√©es PostgreSQL avec cache.
    """
    
    @staticmethod
    async def get_command_status(command_name: str, guild_id: Optional[int] = None, use_cache: bool = True) -> bool:
        """
        R√©cup√®re le statut d'une commande depuis la base de donn√©es.
        
        Args:
            command_name (str): Nom de la commande
            guild_id (Optional[int]): ID du serveur (optionnel)
            use_cache (bool): Utiliser le cache en m√©moire
            
        Returns:
            bool: True si la commande est activ√©e, False sinon
        """
        cache_key = f"{command_name}_{guild_id}" if guild_id else command_name
        
        if use_cache:
            if cache_key in COMMAND_STATUS_CACHE:
                if datetime.now() < CACHE_EXPIRY.get(cache_key, datetime.min):
                    return COMMAND_STATUS_CACHE[cache_key]
                else:
                    del COMMAND_STATUS_CACHE[cache_key]
                    if cache_key in CACHE_EXPIRY:
                        del CACHE_EXPIRY[cache_key]
        
        try:
            db_manager = get_db_connection()
            if db_manager is None:
                print("‚ö†Ô∏è Base de donn√©es non disponible, retour du statut par d√©faut")
                return True
                
            await db_manager.initialize()
            
            async with db_manager.get_connection() as conn:
                if guild_id:
                    row = await conn.fetchrow("""
                        SELECT is_enabled FROM command_status 
                        WHERE command_name = $1 AND guild_id = $2
                    """, command_name, guild_id)
                else:
                    row = await conn.fetchrow("""
                        SELECT is_enabled FROM command_status 
                        WHERE command_name = $1 AND guild_id IS NULL
                    """, command_name)
                    
                if row is not None:
                    status = row['is_enabled']
                else:
                    status = True
                    await CommandStatusManager.set_command_status(command_name, True, guild_id)
                    
                if use_cache:
                    COMMAND_STATUS_CACHE[cache_key] = status
                    CACHE_EXPIRY[cache_key] = datetime.now() + CACHE_DURATION
                    
                return status
                
        except Exception as e:
            print(f"‚ùå Erreur lors de la r√©cup√©ration du statut de la commande {command_name}: {e}")
            return True
    
    @staticmethod
    async def set_command_status(command_name: str, is_enabled: bool, guild_id: Optional[int] = None, interaction: Optional[discord.Interaction] = None) -> bool:
        """
        D√©finit le statut d'une commande.
        
        Args:
            command_name (str): Nom de la commande
            is_enabled (bool): True pour activer, False pour d√©sactiver
            guild_id (Optional[int]): ID du serveur (optionnel)
            interaction (Optional[discord.Interaction]): Interaction Discord pour le logging
            
        Returns:
            bool: True si succ√®s, False sinon
        """
        try:
            db_manager = get_db_connection()
            if db_manager is None:
                print("‚ö†Ô∏è Base de donn√©es non disponible")
                return False
                
            await db_manager.initialize()
                
            async with db_manager.get_connection() as conn:
                if guild_id:
                    # Upsert pour commande sp√©cifique au serveur
                    await conn.execute("""
                        INSERT INTO command_status (command_name, guild_id, is_enabled, updated_at)
                        VALUES ($1, $2, $3, $4)
                        ON CONFLICT (command_name, guild_id) 
                        DO UPDATE SET is_enabled = EXCLUDED.is_enabled, updated_at = EXCLUDED.updated_at
                    """, command_name, guild_id, is_enabled, datetime.now())
                else:
                    # Upsert pour commande globale
                    await conn.execute("""
                        INSERT INTO command_status (command_name, guild_id, is_enabled, updated_at)
                        VALUES ($1, NULL, $2, $3)
                        ON CONFLICT (command_name, guild_id) 
                        DO UPDATE SET is_enabled = EXCLUDED.is_enabled, updated_at = EXCLUDED.updated_at
                    """, command_name, is_enabled, datetime.now())
                
                # Invalider le cache
                cache_key = f"{command_name}_{guild_id}" if guild_id else command_name
                if cache_key in COMMAND_STATUS_CACHE:
                    del COMMAND_STATUS_CACHE[cache_key]
                if cache_key in CACHE_EXPIRY:
                    del CACHE_EXPIRY[cache_key]
                
                # Logger le changement si une interaction est fournie
                if interaction:
                    await log_command_status_change(interaction, command_name, is_enabled, guild_id)
                
                return True
                
        except Exception as e:
            print(f"‚ùå Erreur lors de la d√©finition du statut de la commande {command_name}: {e}")
            return False
    
    @staticmethod
    async def get_all_command_status(guild_id: Optional[int] = None) -> Dict[str, bool]:
        """
        R√©cup√®re le statut de toutes les commandes.
        
        Args:
            guild_id (Optional[int]): ID du serveur (optionnel)
            
        Returns:
            Dict[str, bool]: Dictionnaire {nom_commande: statut}
        """
        try:
            db_manager = get_db_connection()
            if db_manager is None:
                print("‚ö†Ô∏è Base de donn√©es non disponible")
                return {}
                
            await db_manager.initialize()
                
            async with db_manager.get_connection() as conn:
                if guild_id:
                    rows = await conn.fetch("""
                        SELECT command_name, is_enabled FROM command_status 
                        WHERE guild_id = $1 OR guild_id IS NULL
                        ORDER BY command_name
                    """, guild_id)
                else:
                    rows = await conn.fetch("""
                        SELECT command_name, is_enabled FROM command_status 
                        WHERE guild_id IS NULL
                        ORDER BY command_name
                    """)
                
                return {row['command_name']: row['is_enabled'] for row in rows}
                
        except Exception as e:
            print(f"‚ùå Erreur lors de la r√©cup√©ration de tous les statuts: {e}")
            return {}
    
    @staticmethod
    async def clear_cache():
        """
        Vide le cache des statuts de commandes.
        
        Returns:
            None
        """
        global COMMAND_STATUS_CACHE, CACHE_EXPIRY
        COMMAND_STATUS_CACHE.clear()
        CACHE_EXPIRY.clear()
        print("üßπ Cache des statuts de commandes vid√©")

def command_enabled(guild_specific: bool = False):
    """
    D√©corateur pour v√©rifier automatiquement si une commande est activ√©e.
    
    Ce d√©corateur v√©rifie le statut de la commande avant son ex√©cution
    et envoie un message d'erreur si la commande est d√©sactiv√©e.
    
    Args:
        guild_specific (bool): True si la commande est sp√©cifique au serveur
        
    Returns:
        Callable: Fonction d√©cor√©e
    """
    def decorator(func: Callable) -> Callable:
        @functools.wraps(func)
        async def wrapper(self, interaction: discord.Interaction, *args, **kwargs):
            # Utiliser le nom r√©el de la commande Discord
            command_name = getattr(interaction.command, 'name', func.__name__)
            guild_id: Optional[int] = interaction.guild_id if guild_specific else None
            
            # D√©sactivation du cache : on v√©rifie toujours en base
            is_enabled = await CommandStatusManager.get_command_status(command_name, guild_id, use_cache=False)
            
            if not is_enabled:
                await interaction.response.send_message(
                    f"‚ùå La commande `/{command_name}` est actuellement d√©sactiv√©e.",
                    ephemeral=True
                )
                return
                
            return await func(self, interaction, *args, **kwargs)
        return wrapper
    return decorator

async def init_command_status_table():
    """
    Initialise la table command_status dans la base de donn√©es.
    
    Cette fonction cr√©e la table si elle n'existe pas et configure
    les index n√©cessaires pour optimiser les performances.
    
    Returns:
        None
    """
    try:
        db_manager = get_db_connection()
        if db_manager is None:
            print("‚ö†Ô∏è Base de donn√©es non disponible pour l'initialisation")
            return
            
        await db_manager.initialize()
            
        async with db_manager.get_connection() as conn:
            await conn.execute("""
                CREATE TABLE IF NOT EXISTS command_status (
                    id SERIAL PRIMARY KEY,
                    command_name VARCHAR(100) NOT NULL,
                    guild_id BIGINT,
                    is_enabled BOOLEAN DEFAULT TRUE,
                    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                    UNIQUE(command_name, guild_id)
                )
            """)
            
            # Cr√©er un index pour am√©liorer les performances
            await conn.execute("""
                CREATE INDEX IF NOT EXISTS idx_command_status_name_guild 
                ON command_status(command_name, guild_id)
            """)
            
            print("‚úÖ Table command_status initialis√©e")
                
    except Exception as e:
        print(f"‚ùå Erreur lors de l'initialisation de la table command_status: {e}") 