"""
Module principal d'Hermes Bot - Bot Discord multifonctionnel

Ce module contient le point d'entr√©e principal du bot Discord Hermes.
Il g√®re l'initialisation, la configuration, le chargement des cogs et
le d√©marrage du bot avec toutes ses fonctionnalit√©s.

Fonctionnalit√©s principales:
- Initialisation et configuration du bot Discord
- Chargement automatique des cogs (modules de commandes)
- Gestion de la base de donn√©es PostgreSQL
- Syst√®me de planification des t√¢ches (scheduler)
- Gestion des √©v√©nements Discord (messages, mentions)
- Synchronisation des commandes slash avec Discord
- Validation de la configuration et des variables d'environnement

D√©pendances:
- discord.py: API Discord
- rich: Interface console color√©e
- apscheduler: Planification des t√¢ches
- dotenv: Gestion des variables d'environnement

Auteur: Dr.TableBasse
Version: 2.0
"""

import discord
from discord import Embed, Colour
from discord.ext import commands
import os
import sys
import json
import asyncio

# Ajouter le r√©pertoire courant au chemin d'importation AVANT les imports
current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, current_dir)

# Importer les modules avec gestion d'erreur
try:
    from utils.constants import cogs_names
    from utils.database import init_database, voice_manager, warn_manager
    from utils.command_manager import init_command_status_table
    from config import validate_config, TOKEN_BLAGUE_API
except ImportError as e:
    print(f"‚ùå Erreur d'importation: {e}")
    print(f"üìÅ R√©pertoire courant: {current_dir}")
    print(f"üìÅ Contenu du r√©pertoire:")
    for item in os.listdir(current_dir):
        print(f"   - {item}")
    print(f"üìÅ Contenu du dossier utils:")
    utils_dir = os.path.join(current_dir, 'utils')
    if os.path.exists(utils_dir):
        for item in os.listdir(utils_dir):
            print(f"   - {item}")
    else:
        print("   ‚ùå Dossier utils non trouv√©!")
    sys.exit(1)

from rich.console import Console
from rich.table import Table
from dotenv import load_dotenv

# Charger les variables d'environnement
load_dotenv()

console = Console()

intents = discord.Intents.all()
bot = commands.Bot(command_prefix='/', intents=intents)

async def load_cogs():
    """
    Charge tous les cogs (modules de commandes) du bot.
    
    Cette fonction charge dynamiquement tous les cogs d√©finis dans utils.constants
    et affiche un tableau de statut pour chaque cog charg√©.
    
    Returns:
        None
    """
    table = Table(title="Chargement des Cogs", show_lines=True)

    # Ajouter les colonnes
    table.add_column("Nom du Cog", justify="left", style="cyan", no_wrap=True)
    table.add_column("Statut", justify="center", style="green")

    loaded_cogs = 0
    total_cogs = len(cogs_names())

    for cog in cogs_names():
        try:
            await bot.load_extension(f'{cog}')
            table.add_row(cog, "[bold green]‚úÖ Charg√©")
            loaded_cogs += 1
        except Exception as e:
            table.add_row(cog, f"[bold red]‚ùå Erreur: {str(e)[:30]}...")
            console.print(f"[red]Erreur d√©taill√©e pour {cog}: {e}[/red]")

    # Afficher le tableau
    console.print(table)
    console.print(f"[green]üìä {loaded_cogs}/{total_cogs} cogs charg√©s avec succ√®s[/green]")

@bot.event
async def on_ready():
    """
    √âv√©nement d√©clench√© quand le bot se connecte avec succ√®s √† Discord.
    
    Cette fonction:
    1. Valide la configuration du bot
    2. V√©rifie les variables d'environnement
    3. Initialise la base de donn√©es
    4. Configure le scheduler pour les t√¢ches automatiques
    5. Envoie un message de d√©marrage
    6. Charge les cogs
    7. Synchronise les commandes slash
    
    Returns:
        None
    """
    console.print(f'[green]‚úÖ Bot connect√© en tant que {bot.user.name}[/green]')

    # V√©rifier la configuration
    try:
        validate_config()
    except ValueError as e:
        console.print(f'[red]‚ùå Erreur de configuration: {e}[/red]')
        return

    # R√©cup√©rer les variables d'environnement
    GUILD_ID = os.getenv('GUILD_ID')
    BOT_CHANNEL_START = os.getenv('BOT_CHANNEL_START')
    
    if not GUILD_ID:
        console.print('[red]‚ùå Variable d\'environnement GUILD_ID manquante dans le fichier .env[/red]')
        return
    if not BOT_CHANNEL_START:
        console.print('[red]‚ùå Variable d\'environnement BOT_CHANNEL_START manquante dans le fichier .env[/red]')
        return
        
    GUILD_ID = int(GUILD_ID)
    BOT_CHANNEL_START = int(BOT_CHANNEL_START)

    # V√©rifie si le serveur existe
    guild = bot.get_guild(GUILD_ID)
    if not guild:
        console.print('[red]‚ùå Serveur non trouv√©.[/red]')
        return

    # V√©rifie si le salon existe
    channel = guild.get_channel(BOT_CHANNEL_START)
    if not channel:
        console.print(f'[red]‚ùå Salon sp√©cifi√© non trouv√© pour BOT_CHANNEL_START (valeur: {BOT_CHANNEL_START})[/red]')
        return
    
    # Initialiser la base de donn√©es
    try:
        await init_database()
        console.print('[green]‚úÖ Base de donn√©es initialis√©e[/green]')
        
        # Initialiser la table des statuts de commandes
        await init_command_status_table()
        console.print('[green]‚úÖ Table des statuts de commandes initialis√©e[/green]')
    except Exception as e:
        console.print(f'[red]‚ùå Erreur d\'initialisation de la base de donn√©es: {e}[/red]')
        return



    try:
        # Cr√©ation de l'embed
        embed = Embed(
            title="Hermes au pied ! üêæ",
            description="Bark Bark ! Je suis pr√™t √† servir ! üê∂\n"
                        "[Clique ici pour voir mon d√©veloppeur ‚ù§Ô∏è](https://homepage.drtablebasse.fr)",
            colour=Colour.blue()
        )

        # Ajout de la photo de profil du bot
        avatar_url = bot.user.avatar.url if bot.user.avatar else bot.user.default_avatar.url
        embed.set_thumbnail(url=avatar_url)

        # Ajout des informations suppl√©mentaires
        embed.add_field(name="Nom du Bot", value=f"{bot.user.name}", inline=False)
        embed.add_field(name="Github du Bot", value=f"[Github](https://github.com/drtablebasse/Hermes)", inline=False)

        # Ajout d'un footer
        embed.set_footer(text="D√©velopp√© avec ‚ù§Ô∏è par Dr.TableBasse")

        # Envoi de l'embed dans le salon
        await channel.send(embed=embed)
        console.print(f'[green]‚úÖ Message envoy√© avec succ√®s dans le salon {channel.name}[/green]')
    except Exception as e:
        console.print(f'[red]‚ùå Erreur lors de l\'envoi du message: {e}[/red]')

    # Charger les cogs
    await load_cogs()

    # Synchronisation des commandes sur le serveur
    try:
        bot.tree.copy_global_to(guild=discord.Object(id=GUILD_ID))
        await bot.tree.sync(guild=discord.Object(id=GUILD_ID))
        console.print("[green]‚úÖ Commandes synchronis√©es avec le serveur[/green]")
    except Exception as e:
        console.print(f'[red]‚ùå Erreur de synchronisation des commandes: {e}[/red]')

    with open('.env', 'r', encoding='utf-8') as f:
        print('--- CONTENU .env ---')
        print(f.read())
        print('--------------------')
    print('Valeur brute de COMMAND_LOG_CHANNEL_ID:', os.getenv('COMMAND_LOG_CHANNEL_ID'))

@bot.event
async def on_message(message):
    """
    √âv√©nement d√©clench√© √† chaque message re√ßu sur le serveur.
    
    Cette fonction g√®re:
    - Les mentions du bot (r√©ponse avec une vid√©o)
    - Le traitement des commandes normales
    - La pr√©vention des boucles infinies
    
    Args:
        message: Objet message Discord re√ßu
        
    Returns:
        None
    """
    # Ignore les messages du bot lui-m√™me pour √©viter des boucles infinies
    if message.author == bot.user:
        return
    
    # V√©rifie si le bot a √©t√© mentionn√©
    if bot.user.mentioned_in(message):
        try:
            # Remplacez le chemin par l'endroit o√π votre vid√©o est stock√©e
            video_path = 'src/ping.mp4'
            
            # V√©rifier si le fichier existe
            if os.path.exists(video_path):
                await message.reply(
                    "Arr√™te de me mentionner tocard ! Wouaf ! üê∂",
                    file=discord.File(video_path)
                )
            else:
                await message.reply("Arr√™te de me mentionner tocard ! Wouaf ! üê∂")
        except Exception as e:
            console.print(f'[red]Erreur lors de l\'envoi de la vid√©o: {e}[/red]')
            await message.reply("Arr√™te de me mentionner tocard ! Wouaf ! üê∂")
        return

    # Assurez-vous que les autres commandes et √©v√©nements fonctionnent correctement
    await bot.process_commands(message)

async def main():
    """
    Fonction principale d'initialisation et de d√©marrage du bot.
    
    Cette fonction:
    1. R√©cup√®re le token Discord depuis les variables d'environnement
    2. Valide la pr√©sence du token
    3. D√©marre le bot avec le token
    
    Returns:
        None
    """
    try:
        # R√©cup√©rer le token Discord depuis les variables d'environnement
        TOKEN = os.getenv('DISCORD_TOKEN')
        if not TOKEN:
            console.print('[red]‚ùå Token Discord manquant dans les variables d\'environnement[/red]')
            return
            
        await bot.start(TOKEN)
    except Exception as e:
        console.print(f'[red]‚ùå Erreur lors du d√©marrage du bot: {e}[/red]')

# Ex√©cuter le bot
if __name__ == "__main__":
    asyncio.run(main())
