#!/usr/bin/env python3
"""
Script pour cr√©er l'utilisateur hermes_bot dans PostgreSQL
Utilise Docker pour se connecter √† la base de donn√©es
"""

import subprocess
import sys

def run_docker_command(command, description):
    """Ex√©cute une commande Docker et affiche le r√©sultat"""
    print(f"üîß {description}...")
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ {description} - Succ√®s")
            if result.stdout:
                print(result.stdout)
            return True
        else:
            print(f"‚ùå {description} - √âchec")
            print(f"Erreur: {result.stderr}")
            return False
    except Exception as e:
        print(f"‚ùå {description} - Exception: {e}")
        return False

def main():
    print("üöÄ Cr√©ation de l'utilisateur hermes_bot dans PostgreSQL")
    print("=" * 60)
    
    # V√©rifier que le conteneur PostgreSQL est en cours d'ex√©cution
    if not run_docker_command("sudo docker ps --filter name=saucisseland-postgres --format '{{.Status}}'", "V√©rification du conteneur PostgreSQL"):
        print("‚ùå Le conteneur PostgreSQL n'est pas en cours d'ex√©cution")
        print("üí° D√©marrez-le avec: sudo docker compose up -d db")
        return
    
    # Script SQL pour cr√©er l'utilisateur
    create_user_sql = """
    -- Cr√©er l'utilisateur hermes_bot s'il n'existe pas
    DO $$
    BEGIN
        IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'hermes_bot') THEN
            CREATE USER hermes_bot WITH PASSWORD 'bot_password_2024';
        END IF;
    END
    $$;
    
    -- Accorder les permissions
    GRANT ALL PRIVILEGES ON DATABASE saucisseland TO hermes_bot;
    GRANT ALL ON SCHEMA public TO hermes_bot;
    ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO hermes_bot;
    ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO hermes_bot;
    ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON FUNCTIONS TO hermes_bot;
    """
    
    # √âcrire le script SQL dans un fichier temporaire
    with open("create_hermes_bot.sql", "w") as f:
        f.write(create_user_sql)
    
    # Ex√©cuter le script SQL dans le conteneur PostgreSQL
    docker_command = f"sudo docker exec -i saucisseland-postgres psql -U postgres -d saucisseland -f - < create_hermes_bot.sql"
    
    if run_docker_command(docker_command, "Cr√©ation de l'utilisateur hermes_bot"):
        print("‚úÖ Utilisateur hermes_bot cr√©√© avec succ√®s")
    else:
        print("‚ùå √âchec de la cr√©ation de l'utilisateur hermes_bot")
        return
    
    # Tester la connexion avec hermes_bot
    test_sql = "SELECT version();"
    test_command = f"echo '{test_sql}' | sudo docker exec -i saucisseland-postgres psql -U hermes_bot -d saucisseland"
    
    if run_docker_command(test_command, "Test de connexion avec hermes_bot"):
        print("\nüéâ Configuration PostgreSQL termin√©e avec succ√®s!")
        print("üìù L'utilisateur hermes_bot est maintenant configur√©")
        print("üí° Vous pouvez maintenant d√©marrer le bot avec: python3 main.py")
    else:
        print("\n‚ùå √âchec du test de connexion")
        print("üí° V√©rifiez les logs ci-dessus pour plus de d√©tails")
    
    # Nettoyer le fichier temporaire
    import os
    os.remove("create_hermes_bot.sql")

if __name__ == "__main__":
    main() 